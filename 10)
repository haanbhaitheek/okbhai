//10A)Consider the following shipment schema. The primary keys are underlined. Assume relevant
data types for attributes.
CUSTOMER (cust # , cname, city)
ORDER (order#, odate, cust #, ord-Amt)
ORDER – ITEM (order #, Item #, qty)
ITEM (item #, unit price)
SHIPMENT (order #, ship-date)
Create the above tables in SQL. Specify primary and foreign keys properly. Enter at least 5 tuples in each
table with relevant data. Solve the following queries.
i. List name of the customer, no. of orders placed by each customer residing in Bangalore city.
ii. List the names of the customers who have ordered at least 10 items
iii. List the customer names who have not ordered for item no. 10.
//create tables
Create table CUSTOMER(
Cno INT,
Cname VARCHAR(50),
Ccity VARCHAR(50),
Primary key(Cno)
);
Create table ORDER1(
Ono INT,
Odate DATE,
Ocno INT,
Oamt INT,
Primary key(Ono),
Foreign Key(Ocno) references CUSTOMER(Cno) on delete cascade
);
Create table ITEM(
Ino INT ,
Uprice INT,
Primary key(Ino)
);
Create table ORDER_ITEM(
Iono INT,
Oino INT,
Qty INT,
Primary key(Iono,Oino),
Foreign Key(Iono) references ORDER1(Ono) on delete cascade,
Foreign Key(Oino) references ITEM(Ino) on delete cascade
);
Create table WAREHOUSE(
Wno INT,
Wcity VARCHAR(50),
Primary Key(Wno)
);
Create table SHIPMENT(
Sono INT,
Swno INT,
Shipdate DATE,
Primary key(Sono,Swno),
Foreign Key(Sono) references ORDER1(Ono) on delete cascade,
Foreign Key(Swno) references WAREHOUSE(Wno) on delete cascade
);
//insert values
Insert into CUSTOMER values (1,'Archie','Bangalore');
Insert into CUSTOMER values (2,'Veronica','Bangalore');
Insert into CUSTOMER values (3,'Betty','Mysore');
Insert into CUSTOMER values (4,'Jughead','Bangalore');
Insert into CUSTOMER values (5,'Cheryl','Mysore');
Insert into CUSTOMER values (6,'Jason','Mangalore');
Insert into ORDER1 values (1, '01-Jun-2016',1,1000);
Insert into ORDER1 values (2, '03-Jun-2016',1,2000);
Insert into ORDER1 values (3, '03-Jun-2016',3,3000);
Insert into ORDER1 values (4, '05-Jun-2016',4,4000);
Insert into ORDER1 values (5, '06-Jun-2017',5,5000);
Insert into ITEM values(1,100);
Insert into ITEM values(2,200);
Insert into ITEM values(3,300);
Insert into ITEM values(4,400);
Insert into ITEM values(10,500);
Insert into ORDER_ITEM values(1,1,2);
Insert into ORDER_ITEM values(1,2,1);
Insert into ORDER_ITEM values(2,3,2);
Insert into ORDER_ITEM values(3,4,3);
Insert into ORDER_ITEM values(4,3,1);
Insert into ORDER_ITEM values(5,2,1);
Insert into WAREHOUSE values(1,'Bangalore');
Insert into WAREHOUSE values(2,'Bangalore');
Insert into WAREHOUSE values(3,'Mysore');
Insert into WAREHOUSE values(4,'Mangalore');
Insert into WAREHOUSE values(5,'Mangalore');
Insert into SHIPMENT values(1,1,'03-Jun-2016');
Insert into SHIPMENT values(2,1,'03-Jun-2016');
Insert into SHIPMENT values(3,2,'05-Jun-2016');
Insert into SHIPMENT values(4,3,'05-Jun-2016');
Insert into SHIPMENT values(5,4,'06-Jun-2016');
//List name of customer, no. of orders placed by each customer residing in Bangalore city.
Select Cname,count(Ono)
from CUSTOMER,ORDER1
where Ocno=Cno and Ccity=’Bangalore’
group by Cname;
//List the names of customers who have ordered at least 10 items.
Select Cname,count(*)
from CUSTOMER,ORDER1
where Ocno=Cno group by Cname having count(*)>=10;
//List the customer names who have not ordered for item no. 10
Select distinct(Cname)
from ORDER1,CUSTOMER,ORDER_ITEM
where Ono=Iono and Ocno=Cno and Iono!=10;







//10B)Consider the following Movie table with the following attributes -
Actor_name, Actor_id, Actor_birthdate, Director_name, Director_id, Director_birthdate, film_title,
year of production, type (thriller, comedy, etc.)
Create 10 collections with data relevant to the following questions. Write and execute MongoDB
queries:
 i. List all the movies acted by John and Elly in the year 2012.
 ii. List only the name and type of the movie where Ram has acted, sorted by movie names.
db.createCollection("movie")
{ "ok" : 1 }
db.movie.insert([{act_n:"ram",act_id:13,act_bdate:"2/3/1997",dir_n:"williams",dir_id:101,dir_bdat
e:"12/9/1987",film:"battleship",year:2015,type:"thriller"}])
db.movie.insert([{act_n:"john",act_id:11,act_bdate:"1/2/1998",dir_n:"ram",dir_id:100,dir_bdate:"2/
3/1997",film:"john wick",year:2012,type:"killer"}])
db.movie.insert([{act_n:"elly",act_id:12,act_bdate:"4/12/1998",dir_n:"ram",dir_id:100,dir_bdate:"2
/3/1997",film:"aquaman",year:2012,type:"action"}])
db.movie.insert([{act_n:"ram",act_id:13,act_bdate:"2/3/1997",dir_n:"thomas",dir_id:103,dir_bdate:
"12/3/1999",film:"xxx",year:2018,type:"action"}])
db.movie.insert([{act_n:"john",act_id:11,act_bdate:"1/2/1998",dir_n:"ram",dir_id:100,dir_bdate:"2/
3/1997",film:"mr.bean",year:2018,type:"comedy"}])
//List all the movies acted by John and Elly in the year 2012.
db.movie.find({$and : [{act_n:{$in : ["john","elly"]}},{year:2012}]},{film:1}).pretty()
{ "_id" : ObjectId("5c273e247fd87cec5944fabf"), "film" : "john wick" }
{ "_id" : ObjectId("5c273e2e7fd87cec5944fac0"), "film" : "aquaman" }
//ii. List only the name and type of the movie where Ram has acted sorted by movie names.
db.movie.find({act_n:"ram"},{film:1,type:1}).sort({film:1}).pretty()
{ "_id" : ObjectId("5c273ddb7fd87cec5944fabd"), "film" : "battleship", "type" : "thriller" }
{ "_id" : ObjectId("5c273ef97fd87cec5944fac1"), "film" : "xxx", "type" : "action" }
