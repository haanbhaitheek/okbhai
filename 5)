5A)//Consider the Aircraft database given below. The primary keys are underlined. Assume relevant
data types for attributes.
AIRCRAFT (Aircraft ID, Aircraft_name, Cruising_range)
CERTIFIED (Emp ID, Aircraft ID)
EMPLOYEE (Emp ID, Ename, Salary)
Create the above tables in SQL. Specify primary and foreign keys properly. Enter at least 5 tuples in
each table with relevant data. Solve the following queries.
 i. Find the names of pilots certified for Boeing aircraft
 ii. Arrange the flight no with respect to the ascending order of distance.
 iii. Find the name of pilots who can operate flights with a range greater than 3000 miles but are
not certified on any Boeing aircraft.
Create table aircraft(
aid varchar(9) primary key,
aname varchar(10),
crange int
);
Create table employees(
eid varchar(9) primary key,
ename varchar(10),
salary int
);
Create table certified(
eid varchar(9)references employees(eid),
aid varchar(9)references aircraft(aid)
);
insert into aircraft values('B001','Boeing',4000);
insert into aircraft values('B002','Boeing',2500);
insert into aircraft values('BB003','Blackbeard',6000);
insert into aircraft values('S004','Supermarine',8000);
insert into aircraft values('L005','Lockheed',2100);
insert into employees values(1,'Johnny',40000);
insert into employees values(2,'Timmy',60000);
insert into employees values(3,'Lawrence',70000);
insert into employees values(4,'Zuzu',90000);
insert into employees values(5,'Matt',80000);
insert into certified values(1,'B001');
insert into certified values(1,'B002');
insert into certified values(3,'S004');
insert into certified values(4,'S004');
insert into certified values(5,'L005');
insert into certified values(2,'B002');
insert into certified values(4,'BB003');
insert into certified values(3,'BB003');
insert into certified values(4,'L005');
//Find names of pilots certified to fly Boeing
SELECT DISTINCT E.ename
FROM employees E, certified C, aircraft A
WHERE E.eid = C.eid AND C.aid = A.aid AND A.aname='Boeing';
//Arrange flight no with respect to ascending order of distance
SELECT aid
FROM aircraft
ORDER BY crange ASC;
//Find the name of pilots who can operate flights with a range greater than 3000 miles but are not
certified on any Boeing aircraft.
select distinct(ename) from employees E,certified C, aircraft A where A.crange > 3000 and C.aid
NOT in(select aid from aircraft A where A.aname='Boeing') and E.eid = C.eid






5B)//Consider the following Tourist places table with the following attributes -
Place, address â€“(state, id), tourist attractions,best time of the year to visit,modes of
transport(include nearest airport, railway station etc), accommodation, food - what not to miss for
sure
Create 10 collections with data relevant to the following questions. Write and execute MongoDB
queries:
 i. List the tourist attractions of Kerala. Exclude accommodation and food.
 ii. List the places sorted state wise.
db.createCollection("tourist")
{ "ok" : 1 }
db.tourist.insert([{place:"bangalore",address:"karnataka",id:1,tour_att:"att1",time:"jan",mode:"train
",acc:"acc1",food:"chicken"}])
db.tourist.insert([{place:"kochi",address:"kerala",id:2,tour_att:"att2",time:"feb",mode:"boat",acc:"a
cc2",food:"fish fry"}])
db.tourist.insert([{place:"agra",address:"delhi",id:3,tour_att:"taj
mahal",time:"march",mode:"car",acc:"acc3",food:"petha"}])
//List the tourist attractions of Kerala. Exclude accommodation and food.
db.tourist.find({address:"kerala"},{acc:0,food:0}).pretty()
{
"_id" : ObjectId("5c2737be7fd87cec5944fab8"),
"place" : "kochi",
"address" : "kerala",
"id" : 2,
"tour_att" : "att2",
"time" : "feb",
"mode" : "boat",
}
//List the places sorted state wise.
db.tourist.find({},{place:1}).sort({address:1})
{ "_id" : ObjectId("5c2738557fd87cec5944fab9"), "place" : "agra" }
{ "_id" : ObjectId("5c27375e7fd87cec5944fab7"), "place" : "bangalore" }
{ "_id" : ObjectId("5c2737be7fd87cec5944fab8"), "place" : "kochi" }
